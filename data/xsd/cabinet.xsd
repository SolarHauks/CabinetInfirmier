<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="http://www.univ-grenoble-alpes.fr/l3miage/medical"
        xmlns:ci="http://www.univ-grenoble-alpes.fr/l3miage/medical">
    
    <element name="cabinet" type="ci:Cabinet"/>

    <!--*****************************       Implementation des Complex Type       *****************************-->
    
    <!-- Type Cabinet  -->

    <complexType name="Cabinet">
        <sequence>
            <element name="adresse" type="ci:Adresse"/>
            <element name="infirmiers" type="ci:Infirmiers"/>
            <element name="patients" type="ci:Patients"/>
            <element name="nom" type="ci:Chaine"/>  <!-- le nom du cabinet est une chaine (ex : Soins a Grenoble) -->
        </sequence>
       
    </complexType>

    <!-- Type Infirmiers -->

    <complexType name="Infirmiers">
        <sequence>
            <element name="infirmier" type="ci:Infirmier" maxOccurs="20"/>
        </sequence>
    </complexType>

    <!-- Type Infirmier  -->

    <complexType name="Infirmier">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="photo" type="ci:Photo" minOccurs="0"/>
        </sequence>
        <attribute name="id" type="ci:Nombre3" use="required"/> <!-- En attribut car sert à identifier l'infirmier -->
    </complexType>

    <!-- Type Adresse -->

    <complexType name="Adresse">
        <sequence>
            <element name="rue" type="ci:Chaine"/>
            <element name="codePostal" type="ci:Postal"/>
            <element name="numéro" type="ci:Num_Rue" minOccurs="0"/>
            <element name="ville" type="ci:Chaine" minOccurs="0"/>
            <element name="étage" type="ci:Nombre3" minOccurs="0"/>
        </sequence>
    </complexType>

    <!-- Type Patients -->

    <complexType name="Patients">
        <sequence>
            <element name="patient" type="ci:Patient" maxOccurs="50"/>
        </sequence>
    </complexType>

    <!-- Type Patient -->

    <complexType name="Patient">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="sexe" type="ci:Sexe"/>
            <element name="naissance" type="ci:Date"/>
            <element name="adresse" type="ci:Adresse"/>
            <element name="visite" type="ci:Visite" maxOccurs="unbounded"/> <!-- Un patient peut avoir plusieurs visites -->
            <element name="numéro" type="ci:Secu" minOccurs="0"/> <!-- car on ne l'a pas forcément au moment de rentrer les données -->
            <!-- A VOIR : Peut etre passer par un type Visites ? -->
        </sequence>
    </complexType>

    <!-- Type Visite -->

    <complexType name="Visite">
        <sequence>
            <element name="acte" type="ci:Acte" maxOccurs="unbounded"/> 
            <!-- Un patient peut avoir plusieurs actes lors d'une visite-->
        </sequence>
        <!-- Les 2 infos sont en attribut car caractérisent l'intervention et permet sa recherche -->
        <attribute name="date" type="ci:Date" use="required"/> 
        <attribute name="intervenant" type="ci:Nombre3"/> <!-- optionnel car sera attribue dans un second temps -->
    </complexType>

    <!-- Type Acte -->

    <complexType name="Acte">
        <attribute name="id" type="ci:Nombre3"/> <!-- nature de l'acte -->
    </complexType>


    <!--*****************************       Implementation des Simple Type       *****************************-->
    
    
    <!-- Type Nom -->
    
    <!-- Un Nom commence forcément par une majuscule puis peut être aussi long que l'on veut. -->
    <!-- Un Nom peu être un nom de ville, un prénom, un nom de famille ou encore un nom de cabinet. -->
    <simpleType name="Nom">
        <restriction base="string">
            <pattern value="[A-Z][a-z]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Nombre3 -->
    
    <!-- Un Nombre3 est un nombre à trois chiffres max qui peut représenter le numéro d'un étage d'immeuble, -->
    <!-- le numéro d'un intervenant de cabinet, ou encore un numéro NGAP. -->
    <simpleType name="Nombre3">
        <restriction base="int">
            <maxInclusive value="999"/>
            <minInclusive value="0"/>
        </restriction>
    </simpleType>

    
    <!-- Type Photo -->
    
    <!-- Une photo est une chaine de caractère de la forme 'filename.extension' (parmis jpg, gif, png, svg). -->
    <simpleType name="Photo">
        <restriction base="string">
            <pattern value="[a-zA-Z_-]+[.](jpg|JPG|gif|GIF|png|PNG|svg|SVG)"/>  <!-- A VOIR -->
        </restriction>
    </simpleType>

    
    <!-- Type Num_Rue -->
    
    <!-- Une Num_Rue représente un nombre à 5 chiffres max qui permet de trouver une maison ou un immeuble dans une rue. -->
    <simpleType name="Num_Rue">
        <restriction base="int">    
            <maxInclusive value="99999"/>
            <minInclusive value="1"/>
        </restriction>
    </simpleType>

    
    <!-- Type Chaine -->
    
    <!-- Une Chaine est une chaine de caractère qui commence par une majuscule et qui peut contenir -->
    <!-- majuscules, minuscules et espaces. -->
    <simpleType name="Chaine">
        <restriction base="string">
            <pattern value="[a-zA-Z -]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Postal -->
    
    <!-- Un type Postal représente le code postal d'une ville, il est retranscrit en un nombre à 5 chiffres.-->
    <simpleType name="Postal">
        <restriction base="string">
            <pattern value="[0-9]{5}"/>
        </restriction>
    </simpleType>

    
    <!-- Type Date -->
    
    <!-- Une Date est une chaine de caractère qui affiche une date sous le format "annee-mois-jour". -->
    <simpleType name="Date">
        <restriction base="string">
            <pattern value="[0-9]{4}-[0-9]{2}-[0-9]{2}"/>
        </restriction>
    </simpleType>

    
    <!-- Type Sexe -->
    
    <!-- Un Sexe représente le genre d'une personne, écris en un caractère où H->Homme, F->Femme et A->Autre. -->
    <simpleType name="Sexe">
        <restriction base="string">
            <enumeration value="M"/> <!-- Homme -->
            <enumeration value="F"/> <!-- Femme -->
            <enumeration value="A"/> <!-- Autre -->
        </restriction>
    </simpleType>
    
    
    <!-- Type Secu -->

    <!-- Secu représente dans une chaine de caractère le numéro de sécurité social. -->
    <simpleType name="Secu">
        <restriction base="string">
            <pattern value="[12][0-9]{2}(0[1-9]|1[0-2])(2[AB]|[0-9]{2})[0-9]{3}[0-9]{3}([0-9]{2})"/>
        </restriction>
    </simpleType>
</schema>