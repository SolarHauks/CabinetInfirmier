<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="http://www.univ-grenoble-alpes.fr/l3miage/medical"
        xmlns:ci="http://www.univ-grenoble-alpes.fr/l3miage/medical"
        elementFormDefault = "qualified" >
    
    <element name="cabinet" type="ci:Cabinet"/>

    <!--*****************************       Implementation des Complex Type       *****************************-->
    
    <!-- Type Cabinet  -->
    
    <!-- Un Cabinet à un nom de cabinet une adresse de location ainsi qu'une liste d'infirmiers qui y travaille 
    et une liste de patients. -->
    <complexType name="Cabinet">
        <sequence>
            <element name="nom" type="ci:Chaine"/>  <!-- le nom du cabinet est une chaine (ex : Soins a Grenoble) -->
            <element name="adresse" type="ci:Adresse"/>
            <element name="infirmiers" type="ci:Infirmiers"/>
            <element name="patients" type="ci:Patients"/>
        </sequence>
       
    </complexType>

    <!-- Type Infirmiers -->
    
    <!-- Infirmiers est une liste comprenant les information des infirmiers travaillant dans le cabinet. -->
    <complexType name="Infirmiers">
        <sequence>
            <element name="infirmier" type="ci:Infirmier" maxOccurs="20"/>
        </sequence>
    </complexType>

    <!-- Type Infirmier  -->

    <!-- Un Infirmier doit avoir un nom et un prénom ainsi qu'un Id qui sert à l'identifier et peut avoir une photo. -->
    <complexType name="Infirmier">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="photo" type="ci:Photo" minOccurs="0"/>
        </sequence>
        <attribute name="id" type="ci:Nombre3" use="required"/> <!-- En attribut car sert à identifier l'infirmier -->
    </complexType>

    <!-- Type Adresse -->

    <!-- Une adresse à obligatoirement un nom de rue un codePostal et peut contenir des informations complémentaire, 
    comme un numéro de rue, le nom de la ville et un étage. -->
    <complexType name="Adresse">
        <sequence>
            <element name="étage" type="ci:Etage" minOccurs="0"/>
            <element name="numéro" type="ci:Num_Rue" minOccurs="0"/>
            <element name="rue" type="ci:Chaine"/>
            <element name="codePostal" type="ci:Postal"/>
            <element name="ville" type="ci:Chaine" minOccurs="0"/>
        </sequence>
    </complexType>

    <!-- Type Patients -->

    <!-- Patients contient une liste de patient étant pris en charge par le cabinet. -->
    <complexType name="Patients">
        <sequence>
            <element name="patient" type="ci:Patient" maxOccurs="50"/>
        </sequence>
    </complexType>

    <!-- Type Patient -->

    <!-- Un patient à forcément un nom, un prénom, un genre, une date de naissance et une adresse, ils peuvent
    avoir des visites (A savoir qu'ils peuvent ne pas avoir de visite du tout) ainsi qu'un numéro de sécurité social
    (Peut être vide car on ne l'a pas forcément au moment de rentrer les données). -->
    <complexType name="Patient">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="sexe" type="ci:Sexe"/>
            <element name="naissance" type="date"/>
            <element name="numéro" type="ci:Secu" minOccurs="0"/> <!-- car on ne l'a pas forcément au moment de rentrer les données -->
            <element name="adresse" type="ci:Adresse"/>
            <element name="visite" type="ci:Visite" minOccurs="0" maxOccurs="unbounded"/> <!-- Un patient peut avoir plusieurs visites -->
            <!-- A VOIR : Peut etre passer par un type Visites ? -->
        </sequence>
    </complexType>

    <!-- Type Visite -->

    <!-- -->
    <complexType name="Visite">
        <sequence>
            <element name="acte" type="ci:Acte" maxOccurs="unbounded"/> 
            <!-- Un patient peut avoir plusieurs actes lors d'une visite-->
        </sequence>
        <!-- Les 2 infos sont en attribut car caractérisent l'intervention et permet sa recherche -->
        <attribute name="date" type="date" use="required"/> 
        <attribute name="intervenant" type="ci:Nombre3"/> <!-- optionnel car sera attribue dans un second temps -->
    </complexType>

    <!-- Type Acte -->

    <complexType name="Acte">
        <attribute name="id" type="ci:Nombre3"/> <!-- nature de l'acte -->
    </complexType>


    <!--*****************************       Implementation des Simple Type       *****************************-->
    
    
    <!-- Type Nom -->
    
    <!-- Un Nom commence forcément par une majuscule puis peut être aussi long que l'on veut. -->
    <!-- Un Nom peu être un nom de ville, un prénom, un nom de famille ou encore un nom de cabinet. -->
    <simpleType name="Nom">
        <restriction base="string">
            <pattern value="[A-Z][a-zéèêë]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Nombre3 -->
    
    <!-- Un Nombre3 est un nombre à trois chiffres max qui peut représenter le numéro d'un étage d'immeuble, -->
    <!-- le numéro d'un intervenant de cabinet, ou encore un numéro NGAP. -->
    <simpleType name="Nombre3">
        <restriction base="string">
            <pattern value="[0-9]{3}"/>
        </restriction>
    </simpleType>

    
    <!-- Type Photo -->
    
    <!-- Une photo est une chaine de caractère de la forme 'filename.extension' (parmis jpg, gif, png, svg). -->
    <simpleType name="Photo">
        <restriction base="string">
            <pattern value="[a-zA-Z_-]+[.](jpg|JPG|gif|GIF|png|PNG|svg|SVG)"/>  <!-- A VOIR -->
        </restriction>
    </simpleType>

    
    <!-- Type Num_Rue -->
    
    <!-- Une Num_Rue représente un nombre à 5 chiffres max qui permet de trouver une maison ou un immeuble dans une rue. -->
    <simpleType name="Num_Rue">
        <restriction base="int">    
            <maxInclusive value="99999"/>
            <minInclusive value="1"/>
        </restriction>
    </simpleType>

    
    <!-- Type Chaine -->
    
    <!-- Une Chaine est une chaine de caractère qui commence par une majuscule et qui peut contenir -->
    <!-- majuscules, minuscules et espaces. -->
    <simpleType name="Chaine">
        <restriction base="string">
            <pattern value="[a-zA-Z -]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Postal -->
    
    <!-- Un type Postal représente le code postal d'une ville, il est retranscrit en un nombre à 5 chiffres.-->
    <simpleType name="Postal">
        <restriction base="string">
            <pattern value="[0-9]{5}"/>
        </restriction>
    </simpleType>
    
    <!-- Type Sexe -->
    
    <!-- Un Sexe représente le genre d'une personne, écris en un caractère où H->Homme, F->Femme et A->Autre. -->
    <simpleType name="Sexe">
        <restriction base="string">
            <enumeration value="M"/> <!-- Homme -->
            <enumeration value="F"/> <!-- Femme -->
            <enumeration value="A"/> <!-- Autre -->
        </restriction>
    </simpleType>
    
    
    <!-- Type Secu -->

    <!-- Secu représente dans une chaine de caractère le numéro de sécurité social. -->
    <simpleType name="Secu">
        <restriction base="string">
            <pattern value="[12][0-9]{2}(0[1-9]|1[0-2])(2[AB]|[0-9]{2})[0-9]{3}[0-9]{3}([0-9]{2})"/>
        </restriction>
    </simpleType>
    
    <!-- Type Etage -->

    <!-- Etage est un nombre qui représente l'étage à l'adresse indiqué
    Il peut exister des personnes qui habite dans des immeubles à l'étage n°86 ou encore à l'étage n°-5 -->
    <simpleType name="Etage">
        <restriction base="int">
            <minInclusive value="-999"/> <!-- Allez jusqu'à l'étage -999 permet de prendre large -->
            <maxInclusive value="999"/> <!-- A VOIR -->
        </restriction>
    </simpleType>
</schema>