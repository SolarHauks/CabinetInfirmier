<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="http://www.univ-grenoble-alpes.fr/l3miage/medical"
        xmlns:ci="http://www.univ-grenoble-alpes.fr/l3miage/medical"
        elementFormDefault="qualified" >
    
    <!-- Element racine du schéma : Cabinet -->
    <element name="cabinet" type="ci:Cabinet">
        <keyref name="infirmierExist" refer="ci:infirmierUnique">
            <selector xpath="ci:patients/ci:patient/ci:visite"/>
            <field xpath="@intervenant"/>
        </keyref>
    </element>

    <!-- Elements racines pour la sérialisation -->
    <element name="adresse" type="ci:Adresse"/>
    <element name="infirmiers" type="ci:Infirmiers"/>

    <!--*****************************       Implementation des Complex Type       *****************************-->
    
    <!-- Type Cabinet  -->
    
    <!-- Un Cabinet à un nom, est situé à une adresse, et contient une liste d'infirmiers qui y travaille 
    ainsi qu'une liste de patients. Chaque infirmier est unique, de meme que chaque patient est uniqye-->
    <complexType name="Cabinet">
        <sequence>
            <element name="nom" type="ci:Chaine"/>  <!-- le nom du cabinet est une chaine restreinte (ex : Soins a Grenoble) -->
            <element name="adresse" type="ci:Adresse"/>
            <element name="infirmiers" type="ci:Infirmiers">
                <unique name="infirmierUnique">
                    <selector xpath="ci:infirmier"/>
                    <field xpath="@id"/>
                </unique>
            </element>
            <element name="patients" type="ci:Patients">
                <unique name="patientUnique">
                    <selector xpath="ci:patient"/>
                    <field xpath="ci:numéro"/>
                </unique>
            </element>
        </sequence>
    </complexType>

    <!-- Type Infirmiers -->
    
    <!-- Infirmiers est une liste comprenant les information des infirmiers travaillant dans le cabinet. -->
    <!-- On met le nombre d'infirmier en unbounded on suppose que le cabinet peut recruter autant d'infirmier qu'il le veut -->
    <complexType name="Infirmiers">
        <sequence>
            <element name="infirmier" type="ci:Infirmier" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <!-- Type Infirmier  -->

    <!-- Un Infirmier doit avoir un nom et un prénom ainsi qu'un Id qui sert à l'identifier et peut avoir une photo. -->
    <complexType name="Infirmier">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="photo" type="ci:Photo" minOccurs="0"/>
        </sequence>
        <attribute name="id" type="ci:Nombre3" use="required"/> <!-- En attribut car sert à identifier l'infirmier -->
    </complexType>

    <!-- Type Adresse -->

    <!-- Une adresse a obligatoirement un codePostal et une ville. Elle peut aussi contenir un numéro de rue, 
    un nom de la ville et un étage. -->
    <complexType name="Adresse">
        <sequence>
            <!-- Il peut ne pas avoir d'étage, dans une maison sans étage par exemple -->
            <element name="étage" type="ci:Etage" minOccurs="0"/> 
            <!-- Le numéro de la rue est complémentaire, il existe des rues sans numéro -->
            <element name="numéro" type="ci:Num_Rue" minOccurs="0"/>
            <element name="rue" type="ci:Chaine"/>
            <element name="codePostal" type="ci:Postal"/>
            <!-- Le nom de la ville est facultatif, il est déjà contenue dans le code postal-->
            <element name="ville" type="ci:Chaine" minOccurs="0"/>
        </sequence>
    </complexType>

    <!-- Type Patients -->

    <!-- Patients contient une liste de patient étant pris en charge par le cabinet. -->
    <!-- On met le nombre de patients de cabinet en unbounded, on suppose que le cabinet peut prendre en charge 
    autant de patient qu'il le veut. -->
    <complexType name="Patients">
        <sequence>
            <element name="patient" type="ci:Patient" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <!-- Type Patient -->

    <!-- Un patient a forcément un nom, un prénom, un genre, une date de naissance et une adresse. Ils peuvent
    avoir des visites (A savoir qu'ils peuvent ne pas encore avoir de visite) ainsi qu'un numéro de sécurité social qui 
    est optionnel, car il peut ne pas encore avoir été fourni. -->
    <complexType name="Patient">
        <sequence>
            <element name="nom" type="ci:Nom"/>
            <element name="prénom" type="ci:Nom"/>
            <element name="sexe" type="ci:Sexe"/> <!-- H, F, A -->
            <element name="naissance" type="date"/>
            <!-- numéro de sécurité social (Peut être vide car on ne l'a pas forcément au moment de rentrer les données) -->
            <element name="numéro" type="ci:Secu"/> 
            <element name="adresse" type="ci:Adresse"/>
            <!-- Un patient peut ne pas encore avoir de visite, tout comme il peut avoir une infinité de visite -->
            <element name="visite" type="ci:Visite" minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
    </complexType>

    <!-- Type Visite -->

    <!-- Une visite contient le numéro d'un intervenant du cabinet qui effectue la visite, la date de la visite, 
    ainsi que la liste des actes à effectuer pendant la visite. -->
    <complexType name="Visite">
        <sequence>
            <!-- Un patient peut avoir plusieurs actes lors d'une visite -->
            <element name="acte" type="ci:Acte" maxOccurs="unbounded"/>
        </sequence>
        <!-- Une visite se déroule à une seule date -->
        <attribute name="date" type="date" use="required"/>
        <!-- Un seul intervenant par visite. Peut ne pas encore avoir été attribué -->
        <attribute name="intervenant" type="ci:Nombre3"/> 
    </complexType>

    <!-- Type Acte -->
    
    <!-- Un acte contient un id. -->
    <complexType name="Acte">
        <!-- Un Acte ne contient qu'un seul id, se référant aux actes décris dans le fichier actes.xml -->
        <attribute name="id" type="ci:Nombre3"/> 
    </complexType>


    <!--*****************************       Implementation des Simple Type       *****************************-->
    
    
    <!-- Type Nom -->
    
    <!-- Un Nom est une chaine restreinte commencant forcément par une majuscule puis comportant une suite 
    de lettres minuscules, possiblement accentués. -->
    <!-- Un Nom peu être un nom de ville, un prénom, un nom de famille ou encore un nom de cabinet. -->
    <simpleType name="Nom">
        <restriction base="string">
            <pattern value="[A-Z][a-zéèêëîïôö]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Nombre3 -->
    
    <!-- Un Nombre3 est un nombre à trois chiffres max qui peut représenter le numéro d'un étage d'immeuble, -->
    <!-- le numéro d'un intervenant de cabinet, ou encore un numéro NGAP. -->
    <simpleType name="Nombre3">
        <restriction base="string">
            <!-- Un Nombre3 est un nombre qui est de longueur 3 -->
            <pattern value="[0-9]{3}"/>
        </restriction>
    </simpleType>

    
    <!-- Type Photo -->
    
    <!-- Une photo est une chaine de caractère de la forme 'filename.extension' (parmis jpg, gif, png, svg). -->
    <simpleType name="Photo">
        <restriction base="string">
            <!-- On rentre le nom du fichier avec minuscule ou majuscule puis on met un . 
            et enfin une extension qui définit le format de l'image.-->
            <pattern value="[a-zA-Z_-]+[.](jpg|JPG|gif|GIF|png|PNG|svg|SVG)"/>  <!-- A VOIR -->
        </restriction>
    </simpleType>

    
    <!-- Type Num_Rue -->
    
    <!-- Une Num_Rue représente un nombre à 1 ou 5 chiffres max qui permet de trouver une maison ou un immeuble dans une rue. -->
    <simpleType name="Num_Rue">
        <restriction base="int">    
            <!-- Un Num_Rue se trouve entre le chiffre 1 et le nombre 99999 -->
            <maxInclusive value="99999"/>
            <minInclusive value="1"/>
        </restriction>
    </simpleType>

    
    <!-- Type Chaine -->
    
    <!-- Une Chaine est une chaine de caractère qui commence par une majuscule et qui peut contenir -->
    <!-- majuscules, minuscules et espaces. -->
    <simpleType name="Chaine">
        <restriction base="string">
            <!-- Il peut contenir des accents sur les lettres -->
            <pattern value="[a-zA-Z -éèêëïîôö]+"/>
        </restriction>
    </simpleType>

    
    <!-- Type Postal -->
    
    <!-- Un type Postal représente le code postal d'une ville, et correspond à un nombre à 5 chiffres.-->
    <simpleType name="Postal">
        <restriction base="string">
            <pattern value="[0-9]{5}"/>
        </restriction>
    </simpleType>
    
    <!-- Type Sexe -->
    
    <!-- Un Sexe représente le genre d'une personne, écris en un caractère où H->Homme, F->Femme et A->Autre. -->
    <simpleType name="Sexe">
        <restriction base="string">
            <enumeration value="M"/> <!-- Homme -->
            <enumeration value="F"/> <!-- Femme -->
            <enumeration value="A"/> <!-- Autre -->
        </restriction>
    </simpleType>
    
    
    <!-- Type Secu -->

    <!-- Secu représente dans une chaine de caractère le numéro de sécurité social. -->
    <simpleType name="Secu">
        <restriction base="string">
            <pattern value="[12][0-9]{2}(0[1-9]|1[0-2])(2[AB]|[0-9]{2})[0-9]{3}[0-9]{3}([0-9]{2})"/>
        </restriction>
    </simpleType>
    
    <!-- Type Etage -->

    <!-- Etage est un nombre qui représente l'étage à l'adresse indiqué
    Il peut exister des personnes qui habite dans des immeubles à l'étage n°86 ou encore à l'étage n°-5 (sous-sol) -->
    <simpleType name="Etage">
        <restriction base="int">
            <minInclusive value="-999"/> <!-- Allez jusqu'à l'étage -999 permet de prendre large -->
            <maxInclusive value="999"/> <!-- A VOIR -->
        </restriction>
    </simpleType>
</schema>